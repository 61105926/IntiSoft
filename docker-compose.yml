version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: folcklore-app
    restart: unless-stopped
    ports:
      - "80:80"
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE:-folcklore}
      - DB_USERNAME=${DB_USERNAME:-root}
      - DB_PASSWORD=${DB_PASSWORD}
      - APP_KEY=${APP_KEY}
      - APP_URL=${APP_URL:-http://localhost}
    volumes:
      - storage:/var/www/storage
      - logs:/var/www/storage/logs
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - folcklore-network

  mysql:
    image: mysql:8.0
    container_name: folcklore-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE:-folcklore}
      MYSQL_USER: ${DB_USERNAME:-root}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    networks:
      - folcklore-network

  redis:
    image: redis:7-alpine
    container_name: folcklore-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - folcklore-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  storage:
    driver: local
  logs:
    driver: local

networks:
  folcklore-network:
    driver: bridge